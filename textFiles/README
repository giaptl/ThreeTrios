OVERVIEW:
This project is a Java-based application designed to read and parse configuration files for setting
up the initial state of a grid-based card game. It ensures data integrity by validating the format
and uniqueness of the configuration data. The application reads a grid configuration file to
initialize a grid with holes and card cells, and a card database file to initialize a list of cards
with unique names and predefined attack values. The game model manages the game state, including
player hands, grid state, and game logic, and implements battle logic to handle card interactions
based on their attack values and positions on the grid.

QUICK START:

public class ThreeTrios {

  public static void main(String[] args) {
    try {
      String gridConfigPath = "configFiles" + File.separator + "board.config";
      String cardDataPath = "configFiles" + File.separator + "cards.config";

      Grid grid = ConfigurationReader.readGridConfig(gridConfigPath);
      System.out.println("Grid loaded successfully with " + grid.getRows() + " rows and " +
              grid.getColumns() + " columns.");

      List<Card> cards = ConfigurationReader.readCardData(cardDataPath);
      System.out.println("Card data loaded successfully with " + cards.size() + " cards.");

    } catch (IOException e) {
      System.err.println("Error reading configuration files: " + e.getMessage());
    } catch (IllegalArgumentException e) {
      System.err.println("Invalid configuration: " + e.getMessage());
    }
  }
}

- This is the entry point for the application. It demonstrates how to use the ConfigurationReader
to read and parse through the grid and card files.


KEY COMPONENTS:
ConfigurationReader: Reads and parses grid and card configuration files.
readGridConfig: Initializes a grid with holes and card cells.
readCardData: Initializes a list of cards with unique names and predefined attack values.
ThreeTriosModel: Manages the game state, including player hands, grid state, and game logic.
ThreeTrios: Entry point for the application, demonstrating how to use the ConfigurationReader.

KEY SUBCOMPONENTS:
Grid: Represents the game grid with rows and columns.
Card: Represents a card with a name and attack values for different directions.
Player: Represents a player in the game with a hand of cards.

SOURCE ORG:
src/: Contains the main source code.
model/: Contains the game model classes (Grid, Card, Player, etc.).
configuration/: Contains the ConfigurationReader class.
configFiles/: Contains the example configuration files to test
test/: Contains test cases for the application.

INVARIANT:
The currentPlayer must always be either pRed or pBlue.
This is enforced through the constructor and methods of the GameModel class. The constructor
initializes the currentPlayer to either pRed, so the invariant is ensured by the constructor. Methods
that modify currentPlayer ensure it is set to either pRed or pBlue. For example, the playCard method
switches the current player after a card is played to either Red or Blue, which proves that the
methods of this class also maintain the invariant.

COMMAND-LINE ARGS:
Players: human vs machine(using corner strategy)

----------------------------------------------------------------------------------------------------
Changes for part 2 (HW 6):

Adding missing functionality to the ThreeTriosModel class: We added a method copyOfGrid() to the
Grid class so that a copy of the grid can be retrieved from the model by calling this method on
the grid object. This functionality was originally missing because we previously did not account
for making sure that getGrid() in the model returned an immutable copy of the grid. We also added a
method called getNumCardsAbleToFlip() which returns the number of cards that can be flipped given a
card and a position on the grid. We were originally missing this functionality because we did not
account for the AI player when we were setting up our model. We also updated our ThreeTriosModel
interface to include this new method. We also added a method called getPlayerScore() that takes in
a player and returns that player's score. We originally had a method called getWinner() which was
basically the same code as getPlayerScore() but returned the player object instead of the score. So,
to be more specific according to the requirements of the functionality, we added the method which
utilizes the same helper method as getWinner().

Initially we had our observer methods in the ThreeTriosModel interface, but those were abstracted to
our ReadOnlyThreeTriosModel. With the methods that changed and what not being stated in the paragraph
above.

We also added a barebones controller, where it has the methods to play cards to the board and we can
see how the card owner changes based on the chain rule that the game requires. This implementation
of the controller is not complete and still requires us to implement a lot of the intricacies of the
game that we will complete in our next assignment.
 - This controller is also the part of our app which manages which card is currently being selected.
    This is important because the user needs to know which card is currently selected so that they
    can play it to the board. This happens by calling updateCardSelection() in the controller. That
    method is in the view and is called when a card is clicked on.

We created a MockModel which implements a very stub implementation of the main model so that we can
test out the strategies and also write a couple tests for the controller. Which we will more
comprehensively test in our next assignment.

Our view package contains all the code and info. for the GUI that is being displayed. This is how
the user will be able to see our game and eventually play it at its full functionality. The main
code for it is in GameView, while the CardPanel class represents each card on the board.

We also created a new test package within the test folder called strategy to hold the tests for our
strategy interface. We also did the same with the controller to hold the tests that we are using
for the controller.

The screenshots needed for the assignment are located in a folder called "ViewScreenShots"

EXTRA CREDIT STRATEGIES:

For extra credit, we implemented the following strategies:

1. LeastLikelyFlippedStrategy:
   - This strategy selects the move which minimizes the risk of being flipped by the opponent.
   - Implementation can be found in the `LeastLikelyFlippedStrategy` class.
   - Tests for this strategy can be found in the `test/strategy/LeastLikelyFlippedStrategyTest.java`
     file.

2. MinimaxStrategy:
   - This strategy selects the move which minimizes the maximum gain the opponent can achieve in
     their next move.
   - Implementation can be found in the `MinimaxStrategy` class.
   - Tests for this strategy can be found in the `test/strategy/MinimaxStrategyTest.java` file.


To demonstrate the functionality of these strategies, we have written tests that show each strategy
working solo and in combination with others. These tests ensure that the strategies are flexible
and can be used to create more sophisticated decision-making processes in the game.

You can find the implementations and tests for these strategies in the following locations:
- `src/strategy/LeastLikelyFlippedStrategy.java`
- `src/strategy/MinimaxStrategy.java`
- `test/strategy/LeastLikelyFlippedStrategyTest.java`
- `test/strategy/MinimaxStrategyTest.java`

----------------------------------------------------------------------------------------------------
Changes for part 3 (HW 7):

Large Changes to Model:

We made some small changes in the model, such as changing names and such. We also added the methods
that would implement the listener interfaces in order to make the model more modular and easier to
work with. We also added two new parameters the startGameWithConfig() method, where we added the
ability to create more than just a human player every time the game is started. This allowed us
to implement the ability to create MachinePlayers and let them play.

Also in our getWinner() method we incorrectly calculated the final score of both players, which
should have been num of cards they owned on the board + num of cards in their hand. We forgot to
add the latter and was added in this part.

### New Classes/Interfaces:

PlayerActionListener - Interface
- This interface defines the methods that must be implemented by any class that wants to listen
for player actions, such as selecting a card or a grid cell.

ModelStatusListener - Interface
- This interface defines the methods that must be implemented by any class that wants to listen for
changes in the model's status, such as when a card is played or the game is over.

IPlayer - Interface
- This interface defines the methods that must be implemented by any class that represents a player
in the game. It includes methods for taking a turn, adding a card to the player's hand, and checking
if the player is a computer.

HumanPlayer - Class
- This class implements the `IPlayer` interface and represents a human player in the game. It
includes methods for taking a turn, adding a card to the player's hand, and checking if the
 player is a computer.

MachinePlayer - Class
- This class implements the `IPlayer` interface and represents a machine (computer) player in the
game. It includes methods for taking a turn, adding a card to the player's hand, and checking if the
 player is a computer. The machine player uses a strategy to decide which move to make.

CardPanelFactory - Class
- This class is responsible for creating card panels. It includes methods for creating a card panel
for a specific card and player.

GridPanelManager - Class
- This class is responsible for managing the grid panel. It includes methods for updating the grid
panel and adding cards to the grid.

HandPanelManager - Class
- This class is responsible for managing the hand panels. It includes methods for updating the hand
panels and removing cards from the hand panels.

Controller - Class
The Controller class is responsible for handling user interactions and updating the model and view
accordingly. It implements the PlayerActionListener and ModelStatusListener interfaces to handle
player actions and model status changes. The Controller class ensures that the game state and UI
are always in sync and that the game logic is handled correctly.


### Design Patterns used:

* Factory Method Pattern: *
The CardPanelFactory class is an example of the Factory Method pattern. This pattern defines an
interface for creating an object but allows subclasses to alter the type of objects that will be
created. In this case, the CardPanelFactory is responsible for creating card panels for specific
cards and players.

* Observer Pattern: *
The view in this project uses the Observer pattern. This pattern is used to create a one-to-many
dependency between objects so that when one object changes state, all its dependents are notified
and updated automatically.

The ModelStatusListener interface defines the methods that must be implemented by any class that
wants to listen for changes in the model's status.

The Controller class implements the ModelStatusListener interface and registers itself as a listener
 to the model.

When the model's state changes (e.g., a card is played or the game is over), the model notifies the
 controller, which then updates the view to reflect the changes.

* Facade Pattern: *
The GridPanelManager and HandPanelManager classes are examples of the Facade pattern. This pattern
provides a simplified interface to a complex subsystem, making it easier to use.

The GridPanelManager class is responsible for managing the grid panel, including updating the grid
panel and adding cards to the grid.

The HandPanelManager class is responsible for managing the hand panels, including updating the hand
panels and removing cards from the hand panels.



Overall, these patterns help use reduce coupling between classes and makes our code more modular.

### Listeners Implementation

In the model and view, listeners are implemented to handle events and update the game state and UI
accordingly. The PlayerActionListener interface is implemented by the Controller class to handle
player actions, such as selecting a card or a grid cell. The ModelStatusListener interface is also
implemented by the Controller class to handle changes in the model's status, such as when a card is
played or the game is over.  The Controller class registers itself as a listener for both player
actions and model status events. When a player action occurs, the Controller class updates the model
and view accordingly. Similarly, when the model's status changes, the Controller class updates the
view to reflect these changes.  This implementation ensures that the game state and UI are always
in sync and that the game logic is handled correctly.

----------------------------------------------------------------------------------------------------
Changes for part 4 (HW 8):

----------------------------------------------------------------------------------------------------
Changes for part 5 (HW 9):

LEVEL 0:
To implement the "hint" mode feature, I added a mechanism that allows players to enable or disable
hints at runtime, independently for each player. When a player selects a card, the grid cells
display the number of cards that would be flipped if that card were played on that cell. This
feature is implemented as a separate decoration, ensuring that the rendering code remains
unmodified and the hints can be dynamically added or removed.

Files Changed:
    src/model/GameModel.java:
        Added methods to enable and disable hints for each player.
        Modified the card selection logic to calculate and display hints when enabled.
    src/view/GridPanel.java:
        Added logic to render hint information on the grid cells when hints are enabled.
    src/controller/GameController.java:
        Added methods to handle enabling and disabling hints for each player.
        Integrated hint calculation and display logic into the card selection process.
    src/extrafeatures/HintDecorator.java:
        Created a decorator class to handle the hint logic separately from the main rendering code.
    test/model/GameModelTest.java:
        Added tests to verify the hint functionality and ensure it works correctly when enabled or disabled.

These changes ensure that the hint mode is a flexible and modular feature, enhancing the user
experience without compromising the existing game logic and rendering code.


LEVELS 1 & 2:
In this part, we have implemented additional features and tests to enhance the functionality of the
game. The changes primarily focus on the extrafeatures package and include the implementation of
new battle rules, combination rules, and their corresponding tests. In the updated game logic of
the Model class, the card flipping mechanism has been enhanced to utilize the shouldFlipCard method,
 which is implemented by each BattleRuleStrategy. This change ensures that the game model now
 dynamically checks whether a card should be flipped based on the active battle rules. When a card
 is played, the model iterates through the list of active strategies and invokes their
 shouldFlipCard method to determine if the card should be flipped according to the specific rules
 defined by each strategy. This approach allows for a more flexible and modular game logic,
 accommodating various battle rules seamlessly.

Features Implemented:

    SameBattleRule:
        This rule checks if the values of adjacent cards are the same and flips the card if the
        condition is met.
        Files Affected:
            src/extrafeatures/SameBattleRule.java
            test/extrafeatures/SameBattleRuleTest.java

    PlusBattleRule:
        This rule checks if the sum of the values of adjacent cards matches a specific target sum
        and flips the card if the condition is met.
        Files Affected:
            src/extrafeatures/PlusBattleRule.java
            test/extrafeatures/PlusBattleRuleTest.java

    CombinedBattleRule:
        This rule allows combining multiple battle rules and ensures that invalid combinations
        (e.g., Same and Plus) are not allowed.
        Files Affected:
            src/extrafeatures/CombinedBattleRule.java
            test/extrafeatures/CombinedBattleRuleTest.java

    FallenAceBattleRule:
        This rule ensures that an Ace card loses to a card with a value of 1.
        Files Affected:
            src/extrafeatures/FallenAceBattleRule.java
            test/extrafeatures/FallenAceBattleRuleTest.java

    ReverseBattleRule:
        This rule reverses the usual battle logic, making lower values win against higher values.
        Files Affected:
            src/extrafeatures/ReverseBattleRule.java
            test/extrafeatures/ReverseBattleRuleTest.java


Summary:
The changes in this part focus on implementing new battle rules and ensuring their correct
functionality through comprehensive tests. The extrafeatures package has been significantly
expanded to include these new rules and their corresponding tests, ensuring robust and flexible
game logic.

LEVEL 3: NOT YET IMPLEMENTED