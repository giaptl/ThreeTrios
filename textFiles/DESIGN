Design Document for ThreeTrios Game

Overview:
This document outlines the design of the ThreeTrios game, focusing on the player interface and how
different player implementations (human and AI) can interact with the game model. The goal is to
create a flexible design that allows for various player types and game scenarios, including human
vs. computer and fully automated play.

1. Player Object Analysis

Behaviors:
- getName(): Retrieves the player's name
- getHand(): Returns the player's current hand of cards
- playCard(Card): Plays a card from the player's hand
- getScore(): Returns the player's current score
- isHuman(): Indicates whether the player is human or AI

Assumptions about representation:
- Players have a unique name
- Players have a hand of cards
- The hand is mutable and can change during the game
- Players can be either human or AI
- Players have a score that can be calculated

2. Game Initialization and Player Instantiation

To start the game and play a few moves, we envision the following process:

a. Configuration Loading:
   - Use ConfigurationReader to load the grid configuration and card data
   - Example:
     Grid grid = ConfigurationReader.readGridConfig("configFiles/board1WithNoHoles.config");
     List<Card> deck = ConfigurationReader.readCardData(
                        "configFiles/cardsEnoughForAllBoards.config");

b. GameModel Initialization:
   - Create a new GameModel instance with the loaded grid and deck
   - Example:
     GameModel gameModel = new GameModel(grid, deck);

c. Player Creation:
   - Instantiate two Player objects (one for Red, one for Blue)
   - Distribute initial hands to players
   - Example:
     Player redPlayer = new Player("Red", gameModel.getInitialHand());
     Player bluePlayer = new Player("Blue", gameModel.getInitialHand());

d. Game Setup:
   - Set the initial current player in the GameModel
   - Example:
     gameModel.setPlayers(redPlayer, bluePlayer);
     gameModel.setCurrentPlayer(redPlayer);

e. Playing Moves:
   - Alternate between players, allowing them to play cards
   - Example:
     while (!gameModel.isGameOver()) {
       Player currentPlayer = gameModel.getCurrentPlayer();
       Card cardToPlay = currentPlayer.getHand().get(0);
       int row = 0, col = 0; // For simplicity, always try to play at (0,0)
       gameModel.playCard(currentPlayer, cardToPlay, row, col);
       gameModel.startBattlePhase(row, col);
     }

3. Design Considerations

- Separation of Concerns: The Player class handles player-specific logic, while the GameModel manages the overall game state and rules.
- Flexibility: The IPlayer interface allows for different implementations (e.g., HumanPlayer, AIPlayer) without changing the core game logic.
- Immutability: The Player's hand is returned as a mutable copy to prevent direct modification of the player's state from outside the class.
- Encapsulation: The GameModel encapsulates the game logic, grid state, and turn management, providing a clean API for game progression.

4. Future Enhancements

- Implement concrete HumanPlayer and AIPlayer classes that extend the Player class or implement the IPlayer interface.
- Add a UserInterface class to handle input/output for human players.
- Implement more sophisticated AI strategies for computer players.
- Add a GameController to manage the flow of the game and handle interactions between the model, view, and players.

This design provides a flexible foundation for the ThreeTrios game, allowing for easy extension and modification as the game evolves in future assignments.
